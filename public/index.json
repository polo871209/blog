[{"content":"TL;DR We all know about scratch – the empty container image. With literally nothing in it, you can run binaries with zero overhead while still utilizing every advantage containers have to offer.\nHowever, this also means debugging feels like trying to fix a car with the hood welded shut and adding any libraries can be a real nightmare. No shell, no package manager, no nothing.\nSo here I am, introducing Wolfi – a minimal container image that\u0026rsquo;s both tiny and secure, yet still gives you the benefits of a proper package manager.\nWhat Makes Wolfi Special? Think of Wolfi as the sweet spot between scratch and bloated base images like Ubuntu or Alpine. It\u0026rsquo;s designed from the ground up for containers, which means:\nTiny footprint: We\u0026rsquo;re talking megabytes, not gigabytes APK-compatible package manager: Familiar syntax, but it\u0026rsquo;s actually Wolfi\u0026rsquo;s own package ecosystem Security-first: No legacy baggage, modern toolchain with dedicated security advisories Glibc-based: Better compatibility than musl-based alternatives Here\u0026rsquo;s the thing though - while Wolfi uses apk commands that look familiar, it\u0026rsquo;s not actually using Alpine\u0026rsquo;s packages. Wolfi maintains its own OS repository with packages built specifically for security and minimal attack surface.\nReal-World Example: Python Service with UV Let me show you how Wolfi shines in practice. Here\u0026rsquo;s a multi-stage Dockerfile that builds a Python service with UV:\n# syntax=docker/dockerfile:1 FROM cgr.dev/chainguard/wolfi-base:latest AS builder RUN apk add --no-cache \\ ca-certificates \\ py3.13-pip \\ python-3.13 \\ uv ENV PYTHONUNBUFFERED=1 \\ PYTHONDONTWRITEBYTECODE=1 \\ PIP_NO_CACHE_DIR=1 WORKDIR /app COPY pyproject.toml uv.lock ./ RUN uv sync --frozen COPY app/ ./app/ COPY proto/ ./proto/ # Runtime stage FROM cgr.dev/chainguard/wolfi-base:latest USER nonroot RUN apk add --no-cache \\ ca-certificates \\ python-3.13 \\ tzdata ENV PYTHONUNBUFFERED=1 \\ PYTHONDONTWRITEBYTECODE=1 \\ PYTHONPATH=\u0026#34;/app\u0026#34; \\ PATH=\u0026#34;/app/.venv/bin:$PATH\u0026#34; WORKDIR /app COPY --from=builder /app/.venv /app/.venv COPY --from=builder --chown=nonroot:nonroot /app/app/ ./app/ COPY --from=builder --chown=nonroot:nonroot /app/proto/ ./proto/ EXPOSE 8000 Breaking Down the Magic Modern Python Tooling Notice how Wolfi makes modern Python development a breeze?\nRUN apk add --no-cache \\ ca-certificates \\ py3.13-pip \\ python-3.13 \\ uv Compare this to Google\u0026rsquo;s Distroless images, where adding a single package means either:\nStarting from a different base image and copying everything over (hello, massive multi-stage complexity) Manually downloading and installing packages without a package manager (debugging nightmare) Or just giving up and going back to a full OS image With Distroless, you\u0026rsquo;re essentially back to the scratch problem - secure but painfully limiting. Wolfi gives you the security benefits without the \u0026ldquo;why can\u0026rsquo;t I just install one simple package?\u0026rdquo; frustration.\nWhile the syntax looks like Alpine\u0026rsquo;s apk, you\u0026rsquo;re actually pulling from Wolfi\u0026rsquo;s curated package repository. Each package is built with security in mind and maintained through their OS project. No more outdated packages or security vulnerabilities lingering for months.\nSecurity by Default The runtime stage shows Wolfi\u0026rsquo;s security-first design:\nUSER nonroot Wolfi comes with a nonroot user pre-configured, so you\u0026rsquo;re not running as root by default. This is the kind of sensible security practice that should be standard but often isn\u0026rsquo;t.\nClean Dependency Management The virtual environment copying is clean and efficient:\nCOPY --from=builder /app/.venv /app/.venv ENV PATH=\u0026#34;/app/.venv/bin:$PATH\u0026#34; No messy global package installations or dependency conflicts. Just clean, isolated environments that work.\nWhy I Switched from Alpine I used to be an Alpine devotee, but Wolfi won me over for a few key reasons:\nBetter compatibility: Glibc means fewer \u0026ldquo;works on my machine\u0026rdquo; moments Dedicated security focus: While Alpine reacts to CVEs, Wolfi proactively tracks and patches vulnerabilities through their advisories system Purpose-built packages: Instead of repurposing server packages, Wolfi builds everything specifically for containers Faster security updates: When a vulnerability hits, Wolfi\u0026rsquo;s automated rebuild system pushes fixes in hours, not days The apk syntax might look the same, but under the hood you\u0026rsquo;re getting a completely different (and more secure) package ecosystem.\nGetting Started Today Want to try Wolfi? Start simple:\nFROM cgr.dev/chainguard/wolfi-base:latest RUN apk add --no-cache curl # Your app here For more specialized needs, Chainguard provides language-specific images:\ncgr.dev/chainguard/go:latest for Go projects cgr.dev/chainguard/node:latest for Node.js cgr.dev/chainguard/python:latest for Python The Bottom Line Wolfi feels like what container base images should have been from the start – minimal but practical, secure but usable. It\u0026rsquo;s not trying to be everything to everyone; it\u0026rsquo;s focused on doing the container base image job really well.\nIf you\u0026rsquo;re tired of choosing between security and convenience, or between size and functionality, give Wolfi a shot. Your future self (and your security team) will thank you.\n","permalink":"http://localhost:1313/blog/posts/wolfi_make_easy/","summary":"\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003cp\u003eWe all know about scratch – the empty container image. With literally nothing in it, you can run binaries with zero overhead while still utilizing every advantage containers have to offer.\u003c/p\u003e\n\u003cp\u003eHowever, this also means debugging feels like trying to fix a car with the hood welded shut and adding any libraries can be a real nightmare. No shell, no package manager, no nothing.\u003c/p\u003e\n\u003cp\u003eSo here I am, introducing \u003cstrong\u003e\u003ca href=\"https://github.com/wolfi-dev\"\u003eWolfi\u003c/a\u003e\u003c/strong\u003e – a minimal container image that\u0026rsquo;s both tiny and secure, yet still gives you the benefits of a proper package manager.\u003c/p\u003e","title":"Wolfi Make Easy"}]